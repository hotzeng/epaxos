# Directory Structure

Dockerfile.server
Dockerfile.client
src/
	epaxos/
		common/
			types.go
		server/
			leader.go
			auditor.go
			main.go
			persister.go
		client/
			main.go

# Client API

PUT(K,V) -> OK
GET(K)   -> V, bool

where K: int32, V: int64

# Protocol

Golang RPC call: https://golang.org/pkg/net/rpc/

# Data File

Each server maintains a number of files:
- 1.dat
- 2.dat
- ...

Each file is a append-only stream of 16-byte struct:
- 4-byte: command
	- 0x00000000: no-op
	- 0x00000001: PUT
- 4-byte: key (valid only if command=1)
- 8-byte: value (valid only if command=1)

Remark: use big endian all the time

# Source Files

epaxos/common/types.go:

- type RequestMsg struct
- type RequestOKMsg struct

- type RequestAndReadMsg struct
- type RequestAndReadOKMsg struct

- type PreAcceptMsg struct
- type PreAcceptOKMsg struct

- type AcceptMsg struct
- type AcceptOKMsg struct

- type CommitMsg struct
- type CommitOKMsg struct // Trivial

- type PrepareMsg struct
- type PrepareOKMsg struct // Or Nack

- type TryPreAcceptMsg struct
- type TryPreAcceptOKMsg struct // Or Nack

- type EPaxos struct

epaxos/server/leader.go:

- func (ep *EPaxos) ProcessRequest(msg *RequestMsg) RequestOKMsg, error
- ...

epaxos/server/auditor.go:

- func (ep *EPaxos) ProcessPreAccept(msg *PreAcceptMsg) PreAcceptOKMsg, error
- ...

epaxos/server/persister.go:

- func (ep *EPaxos) AppendLog(key string, value string) error
- func (ep *EPaxos) RecoverFromLog() error
